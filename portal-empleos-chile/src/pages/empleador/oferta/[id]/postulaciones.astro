---
import Layout from '../../../../layouts/Layout.astro';
import { getSession, getEmpleadorProfile } from '../../../../lib/auth';
import { supabaseServer } from '../../../../lib/supabase';

export const prerender = false;

// Obtener sesión y perfil
const { user } = await getSession(Astro.cookies);
const empleador = await getEmpleadorProfile(Astro.cookies);

// Si no hay sesión, el middleware redirigirá
if (!user || !empleador) {
  return Astro.redirect('/empleador/login');
}

// Obtener ID de la oferta desde URL
const { id } = Astro.params;

// Validar formato UUID
const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
if (!id || !uuidRegex.test(id)) {
  return Astro.redirect('/empleador/dashboard');
}

// Verificar que la oferta existe y pertenece al empleador
const { data: oferta, error: ofertaError } = await supabaseServer
  .from('ofertas')
  .select('*')
  .eq('id', id)
  .eq('empleador_id', empleador.id)
  .single();

if (ofertaError || !oferta) {
  return Astro.redirect('/empleador/dashboard');
}

// Obtener postulaciones de la oferta
const { data: postulaciones, error: postulacionesError } = await supabaseServer
  .from('postulaciones')
  .select('*')
  .eq('oferta_id', id)
  .order('created_at', { ascending: false });

if (postulacionesError) {
  console.error('Error al obtener postulaciones:', postulacionesError);
}

const postulacionesList = postulaciones || [];
---

<Layout title={`Postulaciones - ${oferta.titulo}`}>
  <div class="min-h-screen bg-surface">
    <!-- Header -->
    <header class="bg-white border-b border-border">
      <div class="container mx-auto px-4 py-4">
        <div class="flex items-center justify-between">
          <div>
            <div class="flex items-center gap-3 mb-1">
              <a
                href="/empleador/dashboard"
                class="text-text-secondary hover:text-text-primary transition"
                title="Volver al dashboard"
              >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
              </a>
              <h1 class="text-2xl font-semibold text-text-primary">
                Postulaciones
              </h1>
            </div>
            <p class="text-sm text-text-secondary pl-8">
              {oferta.titulo}
            </p>
          </div>
          <div>
            <span class="inline-flex items-center px-4 py-2 rounded-lg bg-blue-50 text-accent font-medium">
              {postulacionesList.length} {postulacionesList.length === 1 ? 'postulación' : 'postulaciones'}
            </span>
          </div>
        </div>
      </div>
    </header>

    <!-- Contenido Principal -->
    <main class="container mx-auto px-4 py-8">
      <div class="max-w-5xl mx-auto">
        <!-- Información de la oferta -->
        <div class="bg-white rounded-lg shadow-sm border border-border p-6 mb-6">
          <div class="grid md:grid-cols-2 gap-6">
            <div>
              <h3 class="text-sm font-medium text-text-secondary mb-2">Detalles de la Oferta</h3>
              <dl class="space-y-2">
                <div>
                  <dt class="text-xs text-text-secondary">Empresa</dt>
                  <dd class="text-sm text-text-primary font-medium">{oferta.empresa}</dd>
                </div>
                <div>
                  <dt class="text-xs text-text-secondary">Comuna</dt>
                  <dd class="text-sm text-text-primary font-medium">{oferta.comuna}</dd>
                </div>
                <div>
                  <dt class="text-xs text-text-secondary">Tipo de Jornada</dt>
                  <dd class="text-sm text-text-primary font-medium">{oferta.tipo_jornada}</dd>
                </div>
              </dl>
            </div>
            <div>
              <h3 class="text-sm font-medium text-text-secondary mb-2">Estado</h3>
              <dl class="space-y-2">
                <div>
                  <dt class="text-xs text-text-secondary">Publicada</dt>
                  <dd class="text-sm text-text-primary font-medium">
                    {new Date(oferta.created_at).toLocaleDateString('es-CL', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                  </dd>
                </div>
                <div>
                  <dt class="text-xs text-text-secondary">Expira</dt>
                  <dd class="text-sm text-text-primary font-medium">
                    {new Date(oferta.expires_at).toLocaleDateString('es-CL', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                  </dd>
                </div>
                <div>
                  <dt class="text-xs text-text-secondary">Estado</dt>
                  <dd>
                    {oferta.activa && new Date(oferta.expires_at) > new Date() ? (
                      <span class="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-green-100 text-green-700">
                        Activa
                      </span>
                    ) : !oferta.activa ? (
                      <span class="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-gray-100 text-gray-700">
                        Desactivada
                      </span>
                    ) : (
                      <span class="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-yellow-100 text-yellow-700">
                        Expirada
                      </span>
                    )}
                  </dd>
                </div>
              </dl>
            </div>
          </div>
        </div>

        <!-- Tabla de Postulaciones -->
        <div class="bg-white rounded-lg shadow-sm border border-border overflow-hidden">
          {postulacionesList.length === 0 ? (
            <div class="p-12 text-center">
              <svg class="w-16 h-16 mx-auto text-text-secondary mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
              </svg>
              <h3 class="text-lg font-semibold text-text-primary mb-2">
                Sin postulaciones aún
              </h3>
              <p class="text-text-secondary">
                Todavía no has recibido postulaciones para esta oferta
              </p>
            </div>
          ) : (
            <div class="overflow-x-auto">
              <table class="w-full">
                <thead class="bg-surface border-b border-border">
                  <tr>
                    <th class="px-6 py-4 text-left text-xs font-medium text-text-secondary uppercase tracking-wider">
                      Candidato
                    </th>
                    <th class="px-6 py-4 text-left text-xs font-medium text-text-secondary uppercase tracking-wider">
                      Email
                    </th>
                    <th class="px-6 py-4 text-left text-xs font-medium text-text-secondary uppercase tracking-wider">
                      Fecha
                    </th>
                    <th class="px-6 py-4 text-right text-xs font-medium text-text-secondary uppercase tracking-wider">
                      CV
                    </th>
                  </tr>
                </thead>
                <tbody class="divide-y divide-border">
                  {postulacionesList.map((postulacion) => (
                    <tr class="hover:bg-surface transition">
                      <td class="px-6 py-4">
                        <p class="text-sm font-medium text-text-primary">
                          {postulacion.nombre_candidato || 'Anónimo'}
                        </p>
                      </td>
                      <td class="px-6 py-4">
                        <p class="text-sm text-text-secondary">
                          {postulacion.email_candidato || 'No proporcionado'}
                        </p>
                      </td>
                      <td class="px-6 py-4">
                        <p class="text-sm text-text-secondary">
                          {new Date(postulacion.created_at).toLocaleDateString('es-CL', {
                            year: 'numeric',
                            month: 'short',
                            day: 'numeric'
                          })}
                        </p>
                        <p class="text-xs text-text-secondary">
                          {new Date(postulacion.created_at).toLocaleTimeString('es-CL', {
                            hour: '2-digit',
                            minute: '2-digit'
                          })}
                        </p>
                      </td>
                      <td class="px-6 py-4 text-right">
                        <button
                          class="download-cv inline-flex items-center gap-2 px-4 py-2 bg-accent hover:bg-accent-hover text-white text-sm font-medium rounded-lg transition"
                          data-cv-url={postulacion.cv_url}
                          data-nombre={postulacion.nombre_candidato || 'CV'}
                        >
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                          </svg>
                          Descargar
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>

        <!-- Botón volver -->
        <div class="mt-6 text-center">
          <a
            href="/empleador/dashboard"
            class="inline-flex items-center gap-2 px-6 py-3 text-text-secondary hover:text-text-primary border border-border rounded-lg hover:bg-white transition"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
            Volver al Dashboard
          </a>
        </div>
      </div>
    </main>
  </div>
</Layout>

<script define:vars={{ ofertaId: id }} is:inline>
  // Descargar CV
  const downloadButtons = document.querySelectorAll('.download-cv');

  downloadButtons.forEach((button) => {
    button.addEventListener('click', async (e) => {
      const target = e.currentTarget;
      const cvUrl = target.dataset.cvUrl;
      const nombre = target.dataset.nombre || 'CV';

      if (!cvUrl) {
        alert('Error: No se encontró la URL del CV');
        return;
      }

      try {
        target.disabled = true;
        target.innerHTML = '<span>Descargando...</span>';

        const response = await fetch(`/api/ofertas/${ofertaId}/cv-download`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ cv_url: cvUrl }),
        });

        if (!response.ok) {
          const data = await response.json();
          alert(data.error || 'Error al descargar el CV');
          return;
        }

        const data = await response.json();

        // Abrir el CV en una nueva pestaña
        window.open(data.url, '_blank');
      } catch (error) {
        console.error('Error:', error);
        alert('Error de conexión al descargar el CV');
      } finally {
        target.disabled = false;
        target.innerHTML = `
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          Descargar
        `;
      }
    });
  });
</script>

---
/**
 * Componente FormularioPostulacion
 *
 * Formulario para postular a ofertas sin registro
 * Incluye drag & drop de CV, validaciones en tiempo real y estados
 * Basado en SPECIFICATIONS.md secciones 5.1, 6.2, 8.1
 */

interface Props {
  ofertaId: string;
  titulo: string;
  empresa: string;
}

const { ofertaId, titulo, empresa } = Astro.props;
---

<div class="bg-white rounded-lg shadow-sm border border-border p-6 md:p-8">
  <h3 class="text-2xl font-semibold text-text-primary mb-2">
    Postular a esta oferta
  </h3>
  <p class="text-text-secondary mb-6">
    No necesitas registro, solo sube tu CV y listo.
  </p>

  <form id="form-postulacion" class="space-y-6">
    <!-- Input nombre (opcional) -->
    <div>
      <label for="nombre" class="block text-sm font-medium text-text-primary mb-2">
        Nombre <span class="text-text-secondary">(opcional)</span>
      </label>
      <input
        type="text"
        id="nombre"
        name="nombre"
        placeholder="Tu nombre completo"
        class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-accent focus:border-transparent transition"
        maxlength="100"
      />
    </div>

    <!-- Input email (opcional) -->
    <div>
      <label for="email" class="block text-sm font-medium text-text-primary mb-2">
        Email <span class="text-text-secondary">(opcional)</span>
      </label>
      <input
        type="email"
        id="email"
        name="email"
        placeholder="tu@email.com"
        aria-describedby="email-error"
        aria-invalid="false"
        class="w-full px-4 py-3 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-accent focus:border-transparent transition"
        maxlength="255"
      />
      <p id="email-error" class="text-sm text-error mt-1 hidden" role="alert">
        Email inválido
      </p>
    </div>

    <!-- Input CV (requerido) con drag & drop -->
    <div>
      <label for="cv" class="block text-sm font-medium text-text-primary mb-2">
        Currículum Vitae (CV) <span class="text-error">*</span>
      </label>

      <!-- Zona de drop -->
      <div
        id="drop-zone"
        class="relative border-2 border-dashed border-border rounded-lg p-8 text-center hover:border-accent transition-colors cursor-pointer"
      >
        <input
          type="file"
          id="cv"
          name="cv"
          accept=".pdf,.doc,.docx,application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document"
          aria-required="true"
          aria-describedby="cv-error"
          class="hidden"
          required
        />

        <!-- Estado default -->
        <div id="drop-zone-default">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="w-12 h-12 mx-auto mb-4 text-accent"
          >
            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
            <polyline points="17 8 12 3 7 8"/>
            <line x1="12" y1="3" x2="12" y2="15"/>
          </svg>
          <p class="text-text-primary font-medium mb-1">
            Arrastra tu CV aquí o haz click para seleccionar
          </p>
          <p class="text-sm text-text-secondary">
            PDF o Word (máximo 5MB)
          </p>
        </div>

        <!-- Preview del archivo -->
        <div id="drop-zone-preview" class="hidden">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="w-12 h-12 mx-auto mb-4 text-success"
          >
            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
            <polyline points="14 2 14 8 20 8"/>
            <line x1="16" y1="13" x2="8" y2="13"/>
            <line x1="16" y1="17" x2="8" y2="17"/>
            <polyline points="10 9 9 9 8 9"/>
          </svg>
          <p id="file-name" class="text-text-primary font-medium mb-1"></p>
          <p id="file-size" class="text-sm text-text-secondary mb-2"></p>
          <button
            type="button"
            id="remove-file"
            class="text-sm text-error hover:underline"
          >
            Eliminar archivo
          </button>
        </div>
      </div>

      <p id="cv-error" class="text-sm text-error mt-1 hidden"></p>
      <p class="text-xs text-text-secondary mt-2">
        Formatos aceptados: PDF, DOC, DOCX (máximo 5MB)
      </p>
    </div>

    <!-- Checkbox privacidad (requerido) -->
    <div class="flex items-start gap-3">
      <input
        type="checkbox"
        id="privacidad"
        name="privacidad"
        required
        class="mt-1 w-4 h-4 text-accent border-border rounded focus:ring-accent focus:ring-2"
      />
      <label for="privacidad" class="text-sm text-text-secondary">
        Acepto la{' '}
        <a
          href="/privacidad"
          target="_blank"
          class="text-accent hover:text-accent-hover underline"
        >
          política de privacidad
        </a>{' '}
        y autorizo el uso de mis datos para este proceso de postulación.
        <span class="text-error">*</span>
      </label>
    </div>
    <p id="privacidad-error" class="text-sm text-error mt-1 hidden">
      Debes aceptar la política de privacidad
    </p>

    <!-- Botón enviar -->
    <button
      type="submit"
      id="btn-enviar"
      class="w-full px-6 py-3 bg-accent text-white rounded-lg hover:bg-accent-hover transition font-medium disabled:bg-gray-400 disabled:cursor-not-allowed flex items-center justify-center gap-2"
    >
      <span id="btn-text">Enviar postulación</span>
      <svg
        id="btn-spinner"
        class="hidden animate-spin w-5 h-5 text-white"
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
      >
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
    </button>
  </form>

  <!-- Mensaje de éxito -->
  <div id="success-message" class="hidden mt-6 p-4 bg-green-50 border border-green-200 rounded-lg">
    <div class="flex items-center gap-3">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="w-6 h-6 text-success flex-shrink-0"
      >
        <polyline points="20 6 9 17 4 12"/>
      </svg>
      <div>
        <p class="font-medium text-success">¡Postulación enviada exitosamente!</p>
        <p class="text-sm text-text-secondary mt-1">
          El empleador recibirá tu CV y se pondrá en contacto contigo.
        </p>
      </div>
    </div>
  </div>

  <!-- Mensaje de error -->
  <div id="error-message" class="hidden mt-6 p-4 bg-red-50 border border-red-200 rounded-lg">
    <div class="flex items-center gap-3">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="w-6 h-6 text-error flex-shrink-0"
      >
        <circle cx="12" cy="12" r="10"/>
        <line x1="12" y1="8" x2="12" y2="12"/>
        <line x1="12" y1="16" x2="12.01" y2="16"/>
      </svg>
      <div>
        <p class="font-medium text-error">Error al enviar postulación</p>
        <p id="error-text" class="text-sm text-text-secondary mt-1"></p>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ ofertaId, titulo, empresa }}>
  // Importar funciones de validación
  import { validateCVFile, formatFileSize, isValidEmail } from '../lib/validations';

  // Elementos del DOM
  const form = document.getElementById('form-postulacion');
  const dropZone = document.getElementById('drop-zone');
  const fileInput = document.getElementById('cv');
  const dropZoneDefault = document.getElementById('drop-zone-default');
  const dropZonePreview = document.getElementById('drop-zone-preview');
  const fileName = document.getElementById('file-name');
  const fileSize = document.getElementById('file-size');
  const removeFileBtn = document.getElementById('remove-file');
  const btnEnviar = document.getElementById('btn-enviar');
  const btnText = document.getElementById('btn-text');
  const btnSpinner = document.getElementById('btn-spinner');
  const successMessage = document.getElementById('success-message');
  const errorMessage = document.getElementById('error-message');
  const errorText = document.getElementById('error-text');

  // Errores
  const emailError = document.getElementById('email-error');
  const cvError = document.getElementById('cv-error');
  const privacidadError = document.getElementById('privacidad-error');

  let selectedFile = null;

  // ═══════════════════════════════════════════════════════════════
  // DRAG & DROP
  // ═══════════════════════════════════════════════════════════════

  // Prevenir comportamiento default del navegador
  ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
    dropZone.addEventListener(eventName, preventDefaults, false);
  });

  function preventDefaults(e) {
    e.preventDefault();
    e.stopPropagation();
  }

  // Highlight al arrastrar
  ['dragenter', 'dragover'].forEach(eventName => {
    dropZone.addEventListener(eventName, () => {
      dropZone.classList.add('border-accent', 'bg-blue-50');
    }, false);
  });

  ['dragleave', 'drop'].forEach(eventName => {
    dropZone.addEventListener(eventName, () => {
      dropZone.classList.remove('border-accent', 'bg-blue-50');
    }, false);
  });

  // Handle drop
  dropZone.addEventListener('drop', handleDrop, false);

  function handleDrop(e) {
    const dt = e.dataTransfer;
    const files = dt.files;
    handleFiles(files);
  }

  // Click en zona de drop
  dropZone.addEventListener('click', () => {
    fileInput.click();
  });

  // Cambio en input file
  fileInput.addEventListener('change', (e) => {
    handleFiles(e.target.files);
  });

  // Procesar archivos
  function handleFiles(files) {
    if (files.length === 0) return;

    const file = files[0];

    // Validar archivo
    const error = validateCVFile(file);
    if (error) {
      showCVError(error);
      return;
    }

    // Archivo válido
    selectedFile = file;
    showFilePreview(file);
    hideCVError();
  }

  // Mostrar preview
  function showFilePreview(file) {
    fileName.textContent = file.name;
    fileSize.textContent = formatFileSize(file.size);

    dropZoneDefault.classList.add('hidden');
    dropZonePreview.classList.remove('hidden');
  }

  // Remover archivo
  removeFileBtn.addEventListener('click', (e) => {
    e.stopPropagation();
    removeFile();
  });

  function removeFile() {
    selectedFile = null;
    fileInput.value = '';

    dropZoneDefault.classList.remove('hidden');
    dropZonePreview.classList.add('hidden');
    hideCVError();
  }

  // ═══════════════════════════════════════════════════════════════
  // VALIDACIÓN EN TIEMPO REAL
  // ═══════════════════════════════════════════════════════════════

  // Validar email
  const emailInput = document.getElementById('email');
  emailInput.addEventListener('blur', () => {
    const email = emailInput.value.trim();
    if (email && !isValidEmail(email)) {
      emailError.classList.remove('hidden');
    } else {
      emailError.classList.add('hidden');
    }
  });

  // ═══════════════════════════════════════════════════════════════
  // ENVÍO DEL FORMULARIO
  // ═══════════════════════════════════════════════════════════════

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    // Ocultar mensajes previos
    hideMessages();

    // Validaciones
    if (!selectedFile) {
      showCVError('Debes seleccionar un archivo CV');
      return;
    }

    const privacidadCheckbox = document.getElementById('privacidad');
    if (!privacidadCheckbox.checked) {
      privacidadError.classList.remove('hidden');
      return;
    }

    // Preparar FormData
    const formData = new FormData();
    formData.append('oferta_id', ofertaId);
    formData.append('nombre_candidato', document.getElementById('nombre').value.trim());
    formData.append('email_candidato', document.getElementById('email').value.trim());
    formData.append('cv', selectedFile);

    // Loading state
    setLoading(true);

    try {
      const response = await fetch('/api/postular', {
        method: 'POST',
        body: formData,
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || 'Error al enviar postulación');
      }

      // Éxito
      showSuccess();
      form.reset();
      removeFile();

    } catch (error) {
      showError(error.message);
    } finally {
      setLoading(false);
    }
  });

  // ═══════════════════════════════════════════════════════════════
  // FUNCIONES UI
  // ═══════════════════════════════════════════════════════════════

  function setLoading(isLoading) {
    btnEnviar.disabled = isLoading;
    if (isLoading) {
      btnText.textContent = 'Enviando...';
      btnSpinner.classList.remove('hidden');
    } else {
      btnText.textContent = 'Enviar postulación';
      btnSpinner.classList.add('hidden');
    }
  }

  function showSuccess() {
    successMessage.classList.remove('hidden');
    form.classList.add('hidden');

    // Scroll al mensaje
    successMessage.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
  }

  function showError(message) {
    errorText.textContent = message;
    errorMessage.classList.remove('hidden');

    // Scroll al mensaje
    errorMessage.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
  }

  function hideMessages() {
    successMessage.classList.add('hidden');
    errorMessage.classList.add('hidden');
    form.classList.remove('hidden');
  }

  function showCVError(message) {
    cvError.textContent = message;
    cvError.classList.remove('hidden');
  }

  function hideCVError() {
    cvError.classList.add('hidden');
  }
</script>

<style>
  /* Animación para spinner */
  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }

  /* Estilos para drag & drop activo */
  #drop-zone.border-accent {
    border-color: #4299E1;
  }
</style>

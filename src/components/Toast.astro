---
/**
 * Sistema de Toast Notifications
 *
 * Muestra notificaciones elegantes en lugar de alerts del navegador
 */
---

<!-- Contenedor de toasts (fixed en la esquina) -->
<div id="toast-container" class="fixed top-4 right-4 z-50 flex flex-col gap-3 pointer-events-none"></div>

<script is:inline>
  // Sistema de Toast Notifications
  window.toast = {
    /**
     * Muestra un toast de éxito
     */
    success: function(message, duration = 4000) {
      this._show(message, 'success', duration);
    },

    /**
     * Muestra un toast de error
     */
    error: function(message, duration = 5000) {
      this._show(message, 'error', duration);
    },

    /**
     * Muestra un toast de advertencia
     */
    warning: function(message, duration = 4000) {
      this._show(message, 'warning', duration);
    },

    /**
     * Muestra un toast informativo
     */
    info: function(message, duration = 4000) {
      this._show(message, 'info', duration);
    },

    /**
     * Función interna para mostrar toasts
     */
    _show: function(message, type, duration) {
      const container = document.getElementById('toast-container');
      if (!container) return;

      // Crear elemento toast
      const toast = document.createElement('div');
      toast.className = `toast toast-${type} pointer-events-auto transform translate-x-full opacity-0 transition-all duration-300`;

      // Configuración por tipo
      const configs = {
        success: {
          icon: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>`,
          bgColor: 'bg-green-50',
          borderColor: 'border-green-200',
          textColor: 'text-green-800',
          iconColor: 'text-green-600'
        },
        error: {
          icon: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>`,
          bgColor: 'bg-red-50',
          borderColor: 'border-red-200',
          textColor: 'text-red-800',
          iconColor: 'text-red-600'
        },
        warning: {
          icon: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
          </svg>`,
          bgColor: 'bg-yellow-50',
          borderColor: 'border-yellow-200',
          textColor: 'text-yellow-800',
          iconColor: 'text-yellow-600'
        },
        info: {
          icon: `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>`,
          bgColor: 'bg-blue-50',
          borderColor: 'border-blue-200',
          textColor: 'text-blue-800',
          iconColor: 'text-blue-600'
        }
      };

      const config = configs[type];

      toast.innerHTML = `
        <div class="flex items-start gap-3 ${config.bgColor} ${config.textColor} border ${config.borderColor} rounded-lg px-4 py-3 shadow-lg min-w-[300px] max-w-md">
          <div class="${config.iconColor} flex-shrink-0 mt-0.5">
            ${config.icon}
          </div>
          <p class="text-sm font-medium flex-1">${message}</p>
          <button class="close-toast ${config.iconColor} hover:opacity-70 transition flex-shrink-0" aria-label="Cerrar">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      `;

      // Agregar al contenedor
      container.appendChild(toast);

      // Animar entrada
      setTimeout(() => {
        toast.classList.remove('translate-x-full', 'opacity-0');
      }, 10);

      // Botón cerrar
      const closeBtn = toast.querySelector('.close-toast');
      closeBtn.addEventListener('click', () => {
        this._remove(toast);
      });

      // Auto-remover después de duration
      if (duration > 0) {
        setTimeout(() => {
          this._remove(toast);
        }, duration);
      }
    },

    /**
     * Remueve un toast con animación
     */
    _remove: function(toast) {
      toast.classList.add('translate-x-full', 'opacity-0');
      setTimeout(() => {
        toast.remove();
      }, 300);
    }
  };

  // Reemplazar alert global con toast.error para mejor UX
  // window.alert = function(message) {
  //   window.toast.info(message);
  // };
</script>

<style>
  #toast-container {
    max-width: calc(100vw - 2rem);
  }

  .toast {
    animation: slideIn 0.3s ease-out;
  }

  @keyframes slideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  /* Responsive */
  @media (max-width: 640px) {
    #toast-container {
      top: 1rem;
      right: 1rem;
      left: 1rem;
    }

    .toast > div {
      min-width: auto;
      width: 100%;
    }
  }
</style>

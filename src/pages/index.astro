---
/**
 * Página principal - Home
 *
 * Muestra mapa interactivo con ofertas de trabajo y lista filtrable
 * Basado en SPECIFICATIONS.md sección 5.1
 */

export const prerender = false;

import Layout from '../layouts/Layout.astro';
import MapaOfertas from '../components/MapaOfertas.astro';
import OfertaCard from '../components/OfertaCard.astro';
import { getOfertasActivas } from '../data/mock-ofertas';
import { findComuna } from '../lib/comunas';

// Obtener ofertas activas desde mock data
const ofertas = getOfertasActivas();

// Transformar ofertas para el mapa (agregar coordenadas lat/lng)
const ofertasConCoordenadas = (ofertas || []).map(oferta => {
  const comuna = findComuna(oferta.comuna);
  return {
    ...oferta,
    lat: comuna?.lat || -33.4489,  // Fallback a Santiago
    lng: comuna?.lng || -70.6693
  };
}).filter(oferta => oferta.lat && oferta.lng);  // Solo ofertas con coordenadas válidas

// Ofertas para el mapa (formato simplificado)
const ofertasParaMapa = ofertasConCoordenadas.map(o => ({
  id: o.id,
  titulo: o.titulo,
  empresa: o.empresa,
  comuna: o.comuna,
  lat: o.lat,
  lng: o.lng
}));

const totalOfertas = ofertas?.length || 0;
---

<Layout>
  <div class="container mx-auto px-4 md:px-8 py-8">
    <!-- Hero Section -->
    <div class="text-center mb-8">
      <h1 class="text-3xl md:text-4xl font-bold text-text-primary mb-3">
        Encuentra tu próximo trabajo en Chile
      </h1>
      <p class="text-lg text-text-secondary max-w-2xl mx-auto">
        Explora ofertas laborales georeferenciadas. Postula sin registro, solo sube tu CV.
      </p>
    </div>

    <!-- Barra de búsqueda mejorada -->
    <div class="mb-6">
      <div class="max-w-3xl mx-auto">
        <div class="relative">
          <input
            type="text"
            id="search-input"
            placeholder="Buscar por título, empresa, comuna o descripción..."
            class="w-full px-4 py-3 pl-12 pr-24 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-accent focus:border-transparent transition"
          />
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="absolute left-4 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400"
            aria-hidden="true"
          >
            <circle cx="11" cy="11" r="8"/>
            <path d="m21 21-4.35-4.35"/>
          </svg>
          <!-- Botón limpiar búsqueda -->
          <button
            id="clear-search"
            class="absolute right-3 top-1/2 -translate-y-1/2 text-text-secondary hover:text-text-primary transition hidden"
            aria-label="Limpiar búsqueda"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div class="flex items-center justify-between mt-2">
          <p class="text-sm text-text-secondary">
            <span id="results-count">{totalOfertas}</span> ofertas disponibles
          </p>
          <button
            id="toggle-filters"
            class="text-sm text-accent hover:text-accent-hover font-medium flex items-center gap-1 transition"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4"></path>
            </svg>
            <span>Filtros avanzados</span>
          </button>
        </div>
      </div>
    </div>

    <!-- Panel de filtros avanzados (oculto por defecto) -->
    <div id="advanced-filters" class="mb-6 hidden">
      <div class="max-w-3xl mx-auto bg-surface border border-border rounded-lg p-6">
        <div class="grid md:grid-cols-2 gap-4">
          <!-- Filtro por categoría -->
          <div>
            <label for="filter-categoria" class="block text-sm font-medium text-text-primary mb-2">
              Categoría
            </label>
            <select
              id="filter-categoria"
              class="w-full px-4 py-2 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-accent transition"
            >
              <option value="all">Todas las categorías</option>
              <option value="Tecnología">Tecnología</option>
              <option value="Ventas">Ventas</option>
              <option value="Administración">Administración</option>
              <option value="Educación">Educación</option>
              <option value="Salud">Salud</option>
              <option value="Construcción">Construcción</option>
              <option value="Gastronomía">Gastronomía</option>
              <option value="Turismo">Turismo</option>
              <option value="Logística">Logística</option>
              <option value="Retail">Retail</option>
              <option value="Otros">Otros</option>
            </select>
          </div>

          <!-- Filtro por ordenamiento -->
          <div>
            <label for="sort-by" class="block text-sm font-medium text-text-primary mb-2">
              Ordenar por
            </label>
            <select
              id="sort-by"
              class="w-full px-4 py-2 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-accent transition"
            >
              <option value="newest">Más recientes</option>
              <option value="oldest">Más antiguas</option>
              <option value="expiring">Próximas a expirar</option>
              <option value="most-applications">Más postulaciones</option>
            </select>
          </div>
        </div>

        <!-- Botón limpiar filtros -->
        <div class="mt-4 flex justify-end">
          <button
            id="clear-filters"
            class="text-sm text-text-secondary hover:text-text-primary transition"
          >
            Limpiar todos los filtros
          </button>
        </div>
      </div>
    </div>

    <!-- Mapa -->
    <div class="mb-12">
      {ofertasParaMapa.length > 0 ? (
        <MapaOfertas ofertas={ofertasParaMapa} />
      ) : (
        <div class="h-[400px] md:h-[500px] rounded-lg bg-surface border border-border flex items-center justify-center">
          <p class="text-text-secondary">No hay ofertas para mostrar en el mapa</p>
        </div>
      )}
    </div>

    <!-- Sección de Favoritos (se muestra dinámicamente si hay favoritos) -->
    <div id="favorites-section" class="mb-12 hidden">
      <div class="flex items-center justify-between mb-4">
        <h2 id="favoritos" class="text-2xl font-bold text-text-primary flex items-center gap-2">
          <svg class="w-6 h-6 text-red-500" fill="currentColor" viewBox="0 0 24 24">
            <path d="M11.645 20.91l-.007-.003-.022-.012a15.247 15.247 0 01-.383-.218 25.18 25.18 0 01-4.244-3.17C4.688 15.36 2.25 12.174 2.25 8.25 2.25 5.322 4.714 3 7.688 3A5.5 5.5 0 0112 5.052 5.5 5.5 0 0116.313 3c2.973 0 5.437 2.322 5.437 5.25 0 3.925-2.438 7.111-4.739 9.256a25.175 25.175 0 01-4.244 3.17 15.247 15.247 0 01-.383.219l-.022.012-.007.004-.003.001a.752.752 0 01-.704 0l-.003-.001z"></path>
          </svg>
          Tus Ofertas Favoritas
        </h2>
        <button
          id="clear-all-favorites"
          class="text-sm text-text-secondary hover:text-error transition"
        >
          Limpiar todos los favoritos
        </button>
      </div>
      <div id="favorites-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8"></div>
      <div class="border-t border-border pt-8">
        <h2 class="text-2xl font-bold text-text-primary mb-4">Todas las Ofertas</h2>
      </div>
    </div>

    <!-- Filtros rápidos -->
    <div class="mb-6 flex items-center gap-3 flex-wrap">
      <span class="text-sm font-medium text-text-secondary">Tipo de jornada:</span>
      <button
        class="filter-btn px-3 py-1 rounded-full border border-border text-sm hover:bg-accent hover:text-white hover:border-accent transition"
        data-filter="all"
        data-active="true"
      >
        Todas
      </button>
      <button
        class="filter-btn px-3 py-1 rounded-full border border-border text-sm hover:bg-accent hover:text-white hover:border-accent transition"
        data-filter="Full-time"
      >
        Full-time
      </button>
      <button
        class="filter-btn px-3 py-1 rounded-full border border-border text-sm hover:bg-accent hover:text-white hover:border-accent transition"
        data-filter="Part-time"
      >
        Part-time
      </button>
      <button
        class="filter-btn px-3 py-1 rounded-full border border-border text-sm hover:bg-accent hover:text-white hover:border-accent transition"
        data-filter="Freelance"
      >
        Freelance
      </button>
      <button
        class="filter-btn px-3 py-1 rounded-full border border-border text-sm hover:bg-accent hover:text-white hover:border-accent transition"
        data-filter="Práctica"
      >
        Práctica
      </button>
    </div>

    <!-- Grid de ofertas -->
    {totalOfertas === 0 && (
      <div class="text-center py-12">
        <p class="text-xl text-text-secondary mb-4">
          No hay ofertas disponibles en este momento
        </p>
        <p class="text-text-secondary mb-6">
          ¿Eres empleador? Publica la primera oferta
        </p>
        <a
          href="/empleador/registro"
          class="inline-block px-6 py-3 bg-accent text-white rounded-lg hover:bg-accent-hover transition font-medium"
        >
          Publicar oferta
        </a>
      </div>
    )}

    {totalOfertas > 0 && (
      <div id="ofertas-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {ofertasConCoordenadas.map(oferta => (
          <div
            class="oferta-item"
            data-id={oferta.id}
            data-titulo={oferta.titulo.toLowerCase()}
            data-empresa={oferta.empresa.toLowerCase()}
            data-comuna={oferta.comuna.toLowerCase()}
            data-descripcion={oferta.descripcion.toLowerCase()}
            data-tipo={oferta.tipo_jornada}
            data-categoria={oferta.categoria || ''}
            data-created={oferta.created_at}
            data-expires={oferta.expires_at}
            data-postulaciones={oferta.postulaciones_count}
          >
            <OfertaCard
              id={oferta.id}
              titulo={oferta.titulo}
              empresa={oferta.empresa}
              comuna={oferta.comuna}
              tipo_jornada={oferta.tipo_jornada}
              created_at={oferta.created_at}
              descripcion={oferta.descripcion}
            />
          </div>
        ))}
      </div>
    )}

    <!-- Mensaje si no hay resultados filtrados -->
    <div id="no-results" class="hidden text-center py-12">
      <p class="text-xl text-text-secondary">
        No se encontraron ofertas con esos criterios
      </p>
    </div>

    <!-- Controles de Paginación -->
    {totalOfertas > 9 && (
      <div id="pagination-container" class="flex items-center justify-between mt-8 pt-6 border-t border-border">
        <div class="text-sm text-text-secondary">
          Mostrando <span id="showing-start">1</span> - <span id="showing-end">9</span> de <span id="total-visible">15</span> ofertas
        </div>
        <div class="flex items-center gap-2">
          <button
            id="prev-page"
            class="px-4 py-2 border border-border rounded-lg text-sm font-medium text-text-secondary hover:bg-surface disabled:opacity-50 disabled:cursor-not-allowed transition"
            disabled
          >
            Anterior
          </button>
          <div id="page-numbers" class="flex items-center gap-1"></div>
          <button
            id="next-page"
            class="px-4 py-2 border border-border rounded-lg text-sm font-medium text-text-secondary hover:bg-surface disabled:opacity-50 disabled:cursor-not-allowed transition"
          >
            Siguiente
          </button>
        </div>
      </div>
    )}
  </div>
</Layout>

<script>
  // ═══════════════════════════════════════════════════════════════
  // ELEMENTOS DOM
  // ═══════════════════════════════════════════════════════════════
  const searchInput = document.getElementById('search-input') as HTMLInputElement;
  const clearSearchBtn = document.getElementById('clear-search') as HTMLButtonElement;
  const toggleFiltersBtn = document.getElementById('toggle-filters') as HTMLButtonElement;
  const advancedFiltersPanel = document.getElementById('advanced-filters') as HTMLElement;
  const clearFiltersBtn = document.getElementById('clear-filters') as HTMLButtonElement;
  const resultsCountEl = document.getElementById('results-count') as HTMLElement;

  const filterCategoriaSelect = document.getElementById('filter-categoria') as HTMLSelectElement;
  const sortBySelect = document.getElementById('sort-by') as HTMLSelectElement;

  const ofertasItems = document.querySelectorAll('.oferta-item');
  const noResultsMessage = document.getElementById('no-results');
  const filterButtons = document.querySelectorAll('.filter-btn');

  const paginationContainer = document.getElementById('pagination-container');
  const prevButton = document.getElementById('prev-page') as HTMLButtonElement;
  const nextButton = document.getElementById('next-page') as HTMLButtonElement;
  const pageNumbersContainer = document.getElementById('page-numbers');
  const showingStart = document.getElementById('showing-start');
  const showingEnd = document.getElementById('showing-end');
  const totalVisible = document.getElementById('total-visible');

  // ═══════════════════════════════════════════════════════════════
  // VARIABLES DE ESTADO
  // ═══════════════════════════════════════════════════════════════
  let currentFilter = 'all';
  let currentCategoria = 'all';
  let currentSort = 'newest';
  let currentPage = 1;
  const ITEMS_PER_PAGE = 9;

  // ═══════════════════════════════════════════════════════════════
  // FUNCIÓN DE ORDENAMIENTO
  // ═══════════════════════════════════════════════════════════════
  function sortItems(items: HTMLElement[]): HTMLElement[] {
    return items.sort((a, b) => {
      switch (currentSort) {
        case 'newest':
          return new Date(b.getAttribute('data-created') || '').getTime() -
                 new Date(a.getAttribute('data-created') || '').getTime();

        case 'oldest':
          return new Date(a.getAttribute('data-created') || '').getTime() -
                 new Date(b.getAttribute('data-created') || '').getTime();

        case 'expiring':
          return new Date(a.getAttribute('data-expires') || '').getTime() -
                 new Date(b.getAttribute('data-expires') || '').getTime();

        case 'most-applications':
          return parseInt(b.getAttribute('data-postulaciones') || '0') -
                 parseInt(a.getAttribute('data-postulaciones') || '0');

        default:
          return 0;
      }
    });
  }

  // ═══════════════════════════════════════════════════════════════
  // FUNCIÓN PRINCIPAL DE FILTRADO Y PAGINACIÓN
  // ═══════════════════════════════════════════════════════════════
  function filterAndPaginateOfertas() {
    const searchTerm = searchInput?.value.toLowerCase() || '';
    let filteredItems: HTMLElement[] = [];

    // Mostrar/ocultar botón de limpiar búsqueda
    if (clearSearchBtn) {
      clearSearchBtn.style.display = searchTerm ? 'block' : 'none';
    }

    // Primero filtrar
    ofertasItems.forEach(item => {
      const titulo = item.getAttribute('data-titulo') || '';
      const empresa = item.getAttribute('data-empresa') || '';
      const comuna = item.getAttribute('data-comuna') || '';
      const descripcion = item.getAttribute('data-descripcion') || '';
      const tipo = item.getAttribute('data-tipo') || '';
      const categoria = item.getAttribute('data-categoria') || '';

      const matchesSearch =
        titulo.includes(searchTerm) ||
        empresa.includes(searchTerm) ||
        comuna.includes(searchTerm) ||
        descripcion.includes(searchTerm);

      const matchesFilter = currentFilter === 'all' || tipo === currentFilter;
      const matchesCategoria = currentCategoria === 'all' || categoria === currentCategoria;

      if (matchesSearch && matchesFilter && matchesCategoria) {
        filteredItems.push(item as HTMLElement);
      } else {
        (item as HTMLElement).style.display = 'none';
      }
    });

    // Ordenar items filtrados
    filteredItems = sortItems(filteredItems);

    // Actualizar contador de resultados
    if (resultsCountEl) {
      resultsCountEl.textContent = filteredItems.length.toString();
    }

    // Calcular paginación
    const totalFiltered = filteredItems.length;
    const totalPages = Math.ceil(totalFiltered / ITEMS_PER_PAGE);

    // Ajustar página actual si es necesario
    if (currentPage > totalPages) {
      currentPage = Math.max(1, totalPages);
    }

    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
    const endIndex = startIndex + ITEMS_PER_PAGE;

    // Mostrar solo items de la página actual
    filteredItems.forEach((item, index) => {
      if (index >= startIndex && index < endIndex) {
        item.style.display = 'block';
      } else {
        item.style.display = 'none';
      }
    });

    // Actualizar UI de paginación
    updatePaginationUI(totalFiltered, totalPages, startIndex, endIndex);

    // Mostrar mensaje si no hay resultados
    if (noResultsMessage) {
      noResultsMessage.style.display = totalFiltered === 0 ? 'block' : 'none';
    }
  }

  // ═══════════════════════════════════════════════════════════════
  // ACTUALIZAR UI DE PAGINACIÓN
  // ═══════════════════════════════════════════════════════════════
  function updatePaginationUI(total: number, totalPages: number, start: number, end: number) {
    if (!paginationContainer) return;

    // Mostrar/ocultar controles de paginación
    if (total <= ITEMS_PER_PAGE) {
      paginationContainer.style.display = 'none';
      return;
    } else {
      paginationContainer.style.display = 'flex';
    }

    // Actualizar texto de contadores
    if (showingStart) showingStart.textContent = (start + 1).toString();
    if (showingEnd) showingEnd.textContent = Math.min(end, total).toString();
    if (totalVisible) totalVisible.textContent = total.toString();

    // Actualizar botones prev/next
    if (prevButton) {
      prevButton.disabled = currentPage === 1;
    }
    if (nextButton) {
      nextButton.disabled = currentPage === totalPages;
    }

    // Generar números de página
    if (pageNumbersContainer) {
      pageNumbersContainer.innerHTML = '';

      for (let i = 1; i <= totalPages; i++) {
        const pageButton = document.createElement('button');
        pageButton.textContent = i.toString();
        pageButton.className = `px-3 py-1.5 text-sm font-medium rounded transition ${
          i === currentPage
            ? 'bg-accent text-white'
            : 'text-text-secondary hover:bg-surface border border-border'
        }`;
        pageButton.addEventListener('click', () => {
          currentPage = i;
          filterAndPaginateOfertas();
          window.scrollTo({ top: 0, behavior: 'smooth' });
        });
        pageNumbersContainer.appendChild(pageButton);
      }
    }
  }

  // ═══════════════════════════════════════════════════════════════
  // EVENT LISTENERS
  // ═══════════════════════════════════════════════════════════════

  // Búsqueda
  searchInput?.addEventListener('input', () => {
    currentPage = 1;
    filterAndPaginateOfertas();
  });

  // Limpiar búsqueda
  clearSearchBtn?.addEventListener('click', () => {
    if (searchInput) {
      searchInput.value = '';
      currentPage = 1;
      filterAndPaginateOfertas();
    }
  });

  // Toggle filtros avanzados
  toggleFiltersBtn?.addEventListener('click', () => {
    if (advancedFiltersPanel) {
      const isHidden = advancedFiltersPanel.classList.contains('hidden');
      if (isHidden) {
        advancedFiltersPanel.classList.remove('hidden');
        advancedFiltersPanel.style.opacity = '0';
        setTimeout(() => {
          advancedFiltersPanel.style.transition = 'opacity 0.3s';
          advancedFiltersPanel.style.opacity = '1';
        }, 10);
      } else {
        advancedFiltersPanel.style.opacity = '0';
        setTimeout(() => {
          advancedFiltersPanel.classList.add('hidden');
        }, 300);
      }
    }
  });

  // Filtro por categoría
  filterCategoriaSelect?.addEventListener('change', () => {
    currentCategoria = filterCategoriaSelect.value;
    currentPage = 1;
    filterAndPaginateOfertas();
  });

  // Ordenamiento
  sortBySelect?.addEventListener('change', () => {
    currentSort = sortBySelect.value;
    currentPage = 1;
    filterAndPaginateOfertas();
  });

  // Limpiar todos los filtros
  clearFiltersBtn?.addEventListener('click', () => {
    if (searchInput) searchInput.value = '';
    if (filterCategoriaSelect) filterCategoriaSelect.value = 'all';
    if (sortBySelect) sortBySelect.value = 'newest';

    currentCategoria = 'all';
    currentSort = 'newest';
    currentFilter = 'all';
    currentPage = 1;

    // Resetear filtros de tipo de jornada
    filterButtons.forEach(btn => {
      btn.removeAttribute('data-active');
      btn.classList.remove('bg-accent', 'text-white', 'border-accent');
      if (btn.getAttribute('data-filter') === 'all') {
        btn.setAttribute('data-active', 'true');
        btn.classList.add('bg-accent', 'text-white', 'border-accent');
      }
    });

    filterAndPaginateOfertas();
    window.toast.success('Filtros limpiados');
  });

  // Filtros de tipo de jornada
  filterButtons.forEach(button => {
    button.addEventListener('click', () => {
      // Actualizar estado activo
      filterButtons.forEach(btn => {
        btn.removeAttribute('data-active');
        btn.classList.remove('bg-accent', 'text-white', 'border-accent');
      });
      button.setAttribute('data-active', 'true');
      button.classList.add('bg-accent', 'text-white', 'border-accent');

      // Actualizar filtro actual
      currentFilter = button.getAttribute('data-filter') || 'all';
      currentPage = 1;
      filterAndPaginateOfertas();
    });
  });

  // Botones de paginación
  prevButton?.addEventListener('click', () => {
    if (currentPage > 1) {
      currentPage--;
      filterAndPaginateOfertas();
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
  });

  nextButton?.addEventListener('click', () => {
    currentPage++;
    filterAndPaginateOfertas();
    window.scrollTo({ top: 0, behavior: 'smooth' });
  });

  // ═══════════════════════════════════════════════════════════════
  // FAVORITOS
  // ═══════════════════════════════════════════════════════════════
  function renderFavorites() {
    const favoritesSection = document.getElementById('favorites-section');
    const favoritesGrid = document.getElementById('favorites-grid');

    if (!favoritesSection || !favoritesGrid) return;

    const favorites = JSON.parse(localStorage.getItem('job-favorites') || '[]');

    if (favorites.length === 0) {
      favoritesSection.classList.add('hidden');
      return;
    }

    favoritesSection.classList.remove('hidden');
    favoritesGrid.innerHTML = '';

    // Renderizar cada oferta favorita
    favorites.forEach((favoriteId: string) => {
      const ofertaItem = document.querySelector(`.oferta-item[data-id="${favoriteId}"]`) as HTMLElement;
      if (ofertaItem) {
        const clonedItem = ofertaItem.cloneNode(true) as HTMLElement;
        favoritesGrid.appendChild(clonedItem);
      }
    });
  }

  // Limpiar todos los favoritos
  const clearAllFavoritesBtn = document.getElementById('clear-all-favorites');
  clearAllFavoritesBtn?.addEventListener('click', () => {
    if (confirm('¿Estás seguro de que deseas eliminar todos los favoritos?')) {
      localStorage.setItem('job-favorites', '[]');
      renderFavorites();
      window.dispatchEvent(new CustomEvent('favorites-updated', { detail: { count: 0 } }));
      window.toast.success('Todos los favoritos han sido eliminados');

      // Re-inicializar los iconos de favoritos en las cards
      document.dispatchEvent(new Event('DOMContentLoaded'));
    }
  });

  // Actualizar favoritos cuando cambien
  window.addEventListener('favorites-updated', () => {
    renderFavorites();
  });

  // Inicializar
  renderFavorites();
  filterAndPaginateOfertas();
</script>

<style>
  /* Estilos para botones de filtro activos */
  .filter-btn[data-active="true"] {
    @apply bg-accent text-white border-accent;
  }
</style>
